// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/Peanuttown/dd_contacts/ent/dept"
	"github.com/Peanuttown/dd_contacts/ent/predicate"
	"github.com/Peanuttown/dd_contacts/ent/user"
	"github.com/Peanuttown/dd_contacts/ent/userpropertyindept"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDept               = "Dept"
	TypeUser               = "User"
	TypeUserPropertyInDept = "UserPropertyInDept"
)

// DeptMutation represents an operation that mutates the Dept nodes in the graph.
type DeptMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uint
	name                           *string
	clearedFields                  map[string]struct{}
	users                          map[string]struct{}
	removedusers                   map[string]struct{}
	clearedusers                   bool
	user_properties_in_dept        map[int]struct{}
	removeduser_properties_in_dept map[int]struct{}
	cleareduser_properties_in_dept bool
	done                           bool
	oldValue                       func(context.Context) (*Dept, error)
	predicates                     []predicate.Dept
}

var _ ent.Mutation = (*DeptMutation)(nil)

// deptOption allows management of the mutation configuration using functional options.
type deptOption func(*DeptMutation)

// newDeptMutation creates new mutation for the Dept entity.
func newDeptMutation(c config, op Op, opts ...deptOption) *DeptMutation {
	m := &DeptMutation{
		config:        c,
		op:            op,
		typ:           TypeDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeptID sets the ID field of the mutation.
func withDeptID(id uint) deptOption {
	return func(m *DeptMutation) {
		var (
			err   error
			once  sync.Once
			value *Dept
		)
		m.oldValue = func(ctx context.Context) (*Dept, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDept sets the old Dept of the mutation.
func withDept(node *Dept) deptOption {
	return func(m *DeptMutation) {
		m.oldValue = func(context.Context) (*Dept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dept entities.
func (m *DeptMutation) SetID(id uint) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DeptMutation) ID() (id uint, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *DeptMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeptMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DeptMutation) ResetName() {
	m.name = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *DeptMutation) AddUserIDs(ids ...string) {
	if m.users == nil {
		m.users = make(map[string]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *DeptMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *DeptMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *DeptMutation) RemoveUserIDs(ids ...string) {
	if m.removedusers == nil {
		m.removedusers = make(map[string]struct{})
	}
	for i := range ids {
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *DeptMutation) RemovedUsersIDs() (ids []string) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *DeptMutation) UsersIDs() (ids []string) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *DeptMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddUserPropertiesInDeptIDs adds the "user_properties_in_dept" edge to the UserPropertyInDept entity by ids.
func (m *DeptMutation) AddUserPropertiesInDeptIDs(ids ...int) {
	if m.user_properties_in_dept == nil {
		m.user_properties_in_dept = make(map[int]struct{})
	}
	for i := range ids {
		m.user_properties_in_dept[ids[i]] = struct{}{}
	}
}

// ClearUserPropertiesInDept clears the "user_properties_in_dept" edge to the UserPropertyInDept entity.
func (m *DeptMutation) ClearUserPropertiesInDept() {
	m.cleareduser_properties_in_dept = true
}

// UserPropertiesInDeptCleared reports if the "user_properties_in_dept" edge to the UserPropertyInDept entity was cleared.
func (m *DeptMutation) UserPropertiesInDeptCleared() bool {
	return m.cleareduser_properties_in_dept
}

// RemoveUserPropertiesInDeptIDs removes the "user_properties_in_dept" edge to the UserPropertyInDept entity by IDs.
func (m *DeptMutation) RemoveUserPropertiesInDeptIDs(ids ...int) {
	if m.removeduser_properties_in_dept == nil {
		m.removeduser_properties_in_dept = make(map[int]struct{})
	}
	for i := range ids {
		m.removeduser_properties_in_dept[ids[i]] = struct{}{}
	}
}

// RemovedUserPropertiesInDept returns the removed IDs of the "user_properties_in_dept" edge to the UserPropertyInDept entity.
func (m *DeptMutation) RemovedUserPropertiesInDeptIDs() (ids []int) {
	for id := range m.removeduser_properties_in_dept {
		ids = append(ids, id)
	}
	return
}

// UserPropertiesInDeptIDs returns the "user_properties_in_dept" edge IDs in the mutation.
func (m *DeptMutation) UserPropertiesInDeptIDs() (ids []int) {
	for id := range m.user_properties_in_dept {
		ids = append(ids, id)
	}
	return
}

// ResetUserPropertiesInDept resets all changes to the "user_properties_in_dept" edge.
func (m *DeptMutation) ResetUserPropertiesInDept() {
	m.user_properties_in_dept = nil
	m.cleareduser_properties_in_dept = false
	m.removeduser_properties_in_dept = nil
}

// Op returns the operation name.
func (m *DeptMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dept).
func (m *DeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeptMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, dept.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dept.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dept.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Dept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dept.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Dept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeptMutation) ResetField(name string) error {
	switch name {
	case dept.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Dept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.users != nil {
		edges = append(edges, dept.EdgeUsers)
	}
	if m.user_properties_in_dept != nil {
		edges = append(edges, dept.EdgeUserPropertiesInDept)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dept.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case dept.EdgeUserPropertiesInDept:
		ids := make([]ent.Value, 0, len(m.user_properties_in_dept))
		for id := range m.user_properties_in_dept {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedusers != nil {
		edges = append(edges, dept.EdgeUsers)
	}
	if m.removeduser_properties_in_dept != nil {
		edges = append(edges, dept.EdgeUserPropertiesInDept)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dept.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case dept.EdgeUserPropertiesInDept:
		ids := make([]ent.Value, 0, len(m.removeduser_properties_in_dept))
		for id := range m.removeduser_properties_in_dept {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedusers {
		edges = append(edges, dept.EdgeUsers)
	}
	if m.cleareduser_properties_in_dept {
		edges = append(edges, dept.EdgeUserPropertiesInDept)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeptMutation) EdgeCleared(name string) bool {
	switch name {
	case dept.EdgeUsers:
		return m.clearedusers
	case dept.EdgeUserPropertiesInDept:
		return m.cleareduser_properties_in_dept
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeptMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeptMutation) ResetEdge(name string) error {
	switch name {
	case dept.EdgeUsers:
		m.ResetUsers()
		return nil
	case dept.EdgeUserPropertiesInDept:
		m.ResetUserPropertiesInDept()
		return nil
	}
	return fmt.Errorf("unknown Dept edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *string
	name                      *string
	phone                     *string
	clearedFields             map[string]struct{}
	depts                     map[uint]struct{}
	removeddepts              map[uint]struct{}
	cleareddepts              bool
	properties_in_dept        map[int]struct{}
	removedproperties_in_dept map[int]struct{}
	clearedproperties_in_dept bool
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// AddDeptIDs adds the "depts" edge to the Dept entity by ids.
func (m *UserMutation) AddDeptIDs(ids ...uint) {
	if m.depts == nil {
		m.depts = make(map[uint]struct{})
	}
	for i := range ids {
		m.depts[ids[i]] = struct{}{}
	}
}

// ClearDepts clears the "depts" edge to the Dept entity.
func (m *UserMutation) ClearDepts() {
	m.cleareddepts = true
}

// DeptsCleared reports if the "depts" edge to the Dept entity was cleared.
func (m *UserMutation) DeptsCleared() bool {
	return m.cleareddepts
}

// RemoveDeptIDs removes the "depts" edge to the Dept entity by IDs.
func (m *UserMutation) RemoveDeptIDs(ids ...uint) {
	if m.removeddepts == nil {
		m.removeddepts = make(map[uint]struct{})
	}
	for i := range ids {
		m.removeddepts[ids[i]] = struct{}{}
	}
}

// RemovedDepts returns the removed IDs of the "depts" edge to the Dept entity.
func (m *UserMutation) RemovedDeptsIDs() (ids []uint) {
	for id := range m.removeddepts {
		ids = append(ids, id)
	}
	return
}

// DeptsIDs returns the "depts" edge IDs in the mutation.
func (m *UserMutation) DeptsIDs() (ids []uint) {
	for id := range m.depts {
		ids = append(ids, id)
	}
	return
}

// ResetDepts resets all changes to the "depts" edge.
func (m *UserMutation) ResetDepts() {
	m.depts = nil
	m.cleareddepts = false
	m.removeddepts = nil
}

// AddPropertiesInDeptIDs adds the "properties_in_dept" edge to the UserPropertyInDept entity by ids.
func (m *UserMutation) AddPropertiesInDeptIDs(ids ...int) {
	if m.properties_in_dept == nil {
		m.properties_in_dept = make(map[int]struct{})
	}
	for i := range ids {
		m.properties_in_dept[ids[i]] = struct{}{}
	}
}

// ClearPropertiesInDept clears the "properties_in_dept" edge to the UserPropertyInDept entity.
func (m *UserMutation) ClearPropertiesInDept() {
	m.clearedproperties_in_dept = true
}

// PropertiesInDeptCleared reports if the "properties_in_dept" edge to the UserPropertyInDept entity was cleared.
func (m *UserMutation) PropertiesInDeptCleared() bool {
	return m.clearedproperties_in_dept
}

// RemovePropertiesInDeptIDs removes the "properties_in_dept" edge to the UserPropertyInDept entity by IDs.
func (m *UserMutation) RemovePropertiesInDeptIDs(ids ...int) {
	if m.removedproperties_in_dept == nil {
		m.removedproperties_in_dept = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproperties_in_dept[ids[i]] = struct{}{}
	}
}

// RemovedPropertiesInDept returns the removed IDs of the "properties_in_dept" edge to the UserPropertyInDept entity.
func (m *UserMutation) RemovedPropertiesInDeptIDs() (ids []int) {
	for id := range m.removedproperties_in_dept {
		ids = append(ids, id)
	}
	return
}

// PropertiesInDeptIDs returns the "properties_in_dept" edge IDs in the mutation.
func (m *UserMutation) PropertiesInDeptIDs() (ids []int) {
	for id := range m.properties_in_dept {
		ids = append(ids, id)
	}
	return
}

// ResetPropertiesInDept resets all changes to the "properties_in_dept" edge.
func (m *UserMutation) ResetPropertiesInDept() {
	m.properties_in_dept = nil
	m.clearedproperties_in_dept = false
	m.removedproperties_in_dept = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.depts != nil {
		edges = append(edges, user.EdgeDepts)
	}
	if m.properties_in_dept != nil {
		edges = append(edges, user.EdgePropertiesInDept)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDepts:
		ids := make([]ent.Value, 0, len(m.depts))
		for id := range m.depts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePropertiesInDept:
		ids := make([]ent.Value, 0, len(m.properties_in_dept))
		for id := range m.properties_in_dept {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddepts != nil {
		edges = append(edges, user.EdgeDepts)
	}
	if m.removedproperties_in_dept != nil {
		edges = append(edges, user.EdgePropertiesInDept)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDepts:
		ids := make([]ent.Value, 0, len(m.removeddepts))
		for id := range m.removeddepts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePropertiesInDept:
		ids := make([]ent.Value, 0, len(m.removedproperties_in_dept))
		for id := range m.removedproperties_in_dept {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddepts {
		edges = append(edges, user.EdgeDepts)
	}
	if m.clearedproperties_in_dept {
		edges = append(edges, user.EdgePropertiesInDept)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeDepts:
		return m.cleareddepts
	case user.EdgePropertiesInDept:
		return m.clearedproperties_in_dept
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDepts:
		m.ResetDepts()
		return nil
	case user.EdgePropertiesInDept:
		m.ResetPropertiesInDept()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPropertyInDeptMutation represents an operation that mutates the UserPropertyInDept nodes in the graph.
type UserPropertyInDeptMutation struct {
	config
	op            Op
	typ           string
	id            *int
	isLeader      *bool
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	dept          *uint
	cleareddept   bool
	done          bool
	oldValue      func(context.Context) (*UserPropertyInDept, error)
	predicates    []predicate.UserPropertyInDept
}

var _ ent.Mutation = (*UserPropertyInDeptMutation)(nil)

// userpropertyindeptOption allows management of the mutation configuration using functional options.
type userpropertyindeptOption func(*UserPropertyInDeptMutation)

// newUserPropertyInDeptMutation creates new mutation for the UserPropertyInDept entity.
func newUserPropertyInDeptMutation(c config, op Op, opts ...userpropertyindeptOption) *UserPropertyInDeptMutation {
	m := &UserPropertyInDeptMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPropertyInDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPropertyInDeptID sets the ID field of the mutation.
func withUserPropertyInDeptID(id int) userpropertyindeptOption {
	return func(m *UserPropertyInDeptMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPropertyInDept
		)
		m.oldValue = func(ctx context.Context) (*UserPropertyInDept, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPropertyInDept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPropertyInDept sets the old UserPropertyInDept of the mutation.
func withUserPropertyInDept(node *UserPropertyInDept) userpropertyindeptOption {
	return func(m *UserPropertyInDeptMutation) {
		m.oldValue = func(context.Context) (*UserPropertyInDept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPropertyInDeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPropertyInDeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserPropertyInDeptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *UserPropertyInDeptMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPropertyInDeptMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserPropertyInDept entity.
// If the UserPropertyInDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPropertyInDeptMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserPropertyInDeptMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[userpropertyindept.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserPropertyInDeptMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[userpropertyindept.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPropertyInDeptMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, userpropertyindept.FieldUserID)
}

// SetDeptID sets the "dept_id" field.
func (m *UserPropertyInDeptMutation) SetDeptID(u uint) {
	m.dept = &u
}

// DeptID returns the value of the "dept_id" field in the mutation.
func (m *UserPropertyInDeptMutation) DeptID() (r uint, exists bool) {
	v := m.dept
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptID returns the old "dept_id" field's value of the UserPropertyInDept entity.
// If the UserPropertyInDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPropertyInDeptMutation) OldDeptID(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptID: %w", err)
	}
	return oldValue.DeptID, nil
}

// ClearDeptID clears the value of the "dept_id" field.
func (m *UserPropertyInDeptMutation) ClearDeptID() {
	m.dept = nil
	m.clearedFields[userpropertyindept.FieldDeptID] = struct{}{}
}

// DeptIDCleared returns if the "dept_id" field was cleared in this mutation.
func (m *UserPropertyInDeptMutation) DeptIDCleared() bool {
	_, ok := m.clearedFields[userpropertyindept.FieldDeptID]
	return ok
}

// ResetDeptID resets all changes to the "dept_id" field.
func (m *UserPropertyInDeptMutation) ResetDeptID() {
	m.dept = nil
	delete(m.clearedFields, userpropertyindept.FieldDeptID)
}

// SetIsLeader sets the "isLeader" field.
func (m *UserPropertyInDeptMutation) SetIsLeader(b bool) {
	m.isLeader = &b
}

// IsLeader returns the value of the "isLeader" field in the mutation.
func (m *UserPropertyInDeptMutation) IsLeader() (r bool, exists bool) {
	v := m.isLeader
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeader returns the old "isLeader" field's value of the UserPropertyInDept entity.
// If the UserPropertyInDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPropertyInDeptMutation) OldIsLeader(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsLeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsLeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeader: %w", err)
	}
	return oldValue.IsLeader, nil
}

// ResetIsLeader resets all changes to the "isLeader" field.
func (m *UserPropertyInDeptMutation) ResetIsLeader() {
	m.isLeader = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserPropertyInDeptMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserPropertyInDeptMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserPropertyInDeptMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserPropertyInDeptMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearDept clears the "dept" edge to the Dept entity.
func (m *UserPropertyInDeptMutation) ClearDept() {
	m.cleareddept = true
}

// DeptCleared reports if the "dept" edge to the Dept entity was cleared.
func (m *UserPropertyInDeptMutation) DeptCleared() bool {
	return m.DeptIDCleared() || m.cleareddept
}

// DeptIDs returns the "dept" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeptID instead. It exists only for internal usage by the builders.
func (m *UserPropertyInDeptMutation) DeptIDs() (ids []uint) {
	if id := m.dept; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDept resets all changes to the "dept" edge.
func (m *UserPropertyInDeptMutation) ResetDept() {
	m.dept = nil
	m.cleareddept = false
}

// Op returns the operation name.
func (m *UserPropertyInDeptMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserPropertyInDept).
func (m *UserPropertyInDeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPropertyInDeptMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, userpropertyindept.FieldUserID)
	}
	if m.dept != nil {
		fields = append(fields, userpropertyindept.FieldDeptID)
	}
	if m.isLeader != nil {
		fields = append(fields, userpropertyindept.FieldIsLeader)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPropertyInDeptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpropertyindept.FieldUserID:
		return m.UserID()
	case userpropertyindept.FieldDeptID:
		return m.DeptID()
	case userpropertyindept.FieldIsLeader:
		return m.IsLeader()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPropertyInDeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userpropertyindept.FieldUserID:
		return m.OldUserID(ctx)
	case userpropertyindept.FieldDeptID:
		return m.OldDeptID(ctx)
	case userpropertyindept.FieldIsLeader:
		return m.OldIsLeader(ctx)
	}
	return nil, fmt.Errorf("unknown UserPropertyInDept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPropertyInDeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpropertyindept.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userpropertyindept.FieldDeptID:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptID(v)
		return nil
	case userpropertyindept.FieldIsLeader:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeader(v)
		return nil
	}
	return fmt.Errorf("unknown UserPropertyInDept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPropertyInDeptMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPropertyInDeptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPropertyInDeptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserPropertyInDept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPropertyInDeptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userpropertyindept.FieldUserID) {
		fields = append(fields, userpropertyindept.FieldUserID)
	}
	if m.FieldCleared(userpropertyindept.FieldDeptID) {
		fields = append(fields, userpropertyindept.FieldDeptID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPropertyInDeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPropertyInDeptMutation) ClearField(name string) error {
	switch name {
	case userpropertyindept.FieldUserID:
		m.ClearUserID()
		return nil
	case userpropertyindept.FieldDeptID:
		m.ClearDeptID()
		return nil
	}
	return fmt.Errorf("unknown UserPropertyInDept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPropertyInDeptMutation) ResetField(name string) error {
	switch name {
	case userpropertyindept.FieldUserID:
		m.ResetUserID()
		return nil
	case userpropertyindept.FieldDeptID:
		m.ResetDeptID()
		return nil
	case userpropertyindept.FieldIsLeader:
		m.ResetIsLeader()
		return nil
	}
	return fmt.Errorf("unknown UserPropertyInDept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPropertyInDeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, userpropertyindept.EdgeUser)
	}
	if m.dept != nil {
		edges = append(edges, userpropertyindept.EdgeDept)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPropertyInDeptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userpropertyindept.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case userpropertyindept.EdgeDept:
		if id := m.dept; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPropertyInDeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPropertyInDeptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPropertyInDeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, userpropertyindept.EdgeUser)
	}
	if m.cleareddept {
		edges = append(edges, userpropertyindept.EdgeDept)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPropertyInDeptMutation) EdgeCleared(name string) bool {
	switch name {
	case userpropertyindept.EdgeUser:
		return m.cleareduser
	case userpropertyindept.EdgeDept:
		return m.cleareddept
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPropertyInDeptMutation) ClearEdge(name string) error {
	switch name {
	case userpropertyindept.EdgeUser:
		m.ClearUser()
		return nil
	case userpropertyindept.EdgeDept:
		m.ClearDept()
		return nil
	}
	return fmt.Errorf("unknown UserPropertyInDept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPropertyInDeptMutation) ResetEdge(name string) error {
	switch name {
	case userpropertyindept.EdgeUser:
		m.ResetUser()
		return nil
	case userpropertyindept.EdgeDept:
		m.ResetDept()
		return nil
	}
	return fmt.Errorf("unknown UserPropertyInDept edge %s", name)
}
