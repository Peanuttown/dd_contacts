// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Peanuttown/dd_contacts/ent/dept"
	"github.com/Peanuttown/dd_contacts/ent/predicate"
	"github.com/Peanuttown/dd_contacts/ent/user"
	"github.com/Peanuttown/dd_contacts/ent/userpropertyindept"
)

// UserPropertyInDeptUpdate is the builder for updating UserPropertyInDept entities.
type UserPropertyInDeptUpdate struct {
	config
	hooks    []Hook
	mutation *UserPropertyInDeptMutation
}

// Where adds a new predicate for the UserPropertyInDeptUpdate builder.
func (upidu *UserPropertyInDeptUpdate) Where(ps ...predicate.UserPropertyInDept) *UserPropertyInDeptUpdate {
	upidu.mutation.predicates = append(upidu.mutation.predicates, ps...)
	return upidu
}

// SetUserID sets the "user_id" field.
func (upidu *UserPropertyInDeptUpdate) SetUserID(s string) *UserPropertyInDeptUpdate {
	upidu.mutation.SetUserID(s)
	return upidu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upidu *UserPropertyInDeptUpdate) SetNillableUserID(s *string) *UserPropertyInDeptUpdate {
	if s != nil {
		upidu.SetUserID(*s)
	}
	return upidu
}

// ClearUserID clears the value of the "user_id" field.
func (upidu *UserPropertyInDeptUpdate) ClearUserID() *UserPropertyInDeptUpdate {
	upidu.mutation.ClearUserID()
	return upidu
}

// SetDeptID sets the "dept_id" field.
func (upidu *UserPropertyInDeptUpdate) SetDeptID(u uint) *UserPropertyInDeptUpdate {
	upidu.mutation.ResetDeptID()
	upidu.mutation.SetDeptID(u)
	return upidu
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (upidu *UserPropertyInDeptUpdate) SetNillableDeptID(u *uint) *UserPropertyInDeptUpdate {
	if u != nil {
		upidu.SetDeptID(*u)
	}
	return upidu
}

// ClearDeptID clears the value of the "dept_id" field.
func (upidu *UserPropertyInDeptUpdate) ClearDeptID() *UserPropertyInDeptUpdate {
	upidu.mutation.ClearDeptID()
	return upidu
}

// SetIsLeader sets the "isLeader" field.
func (upidu *UserPropertyInDeptUpdate) SetIsLeader(b bool) *UserPropertyInDeptUpdate {
	upidu.mutation.SetIsLeader(b)
	return upidu
}

// SetUser sets the "user" edge to the User entity.
func (upidu *UserPropertyInDeptUpdate) SetUser(u *User) *UserPropertyInDeptUpdate {
	return upidu.SetUserID(u.ID)
}

// SetDept sets the "dept" edge to the Dept entity.
func (upidu *UserPropertyInDeptUpdate) SetDept(d *Dept) *UserPropertyInDeptUpdate {
	return upidu.SetDeptID(d.ID)
}

// Mutation returns the UserPropertyInDeptMutation object of the builder.
func (upidu *UserPropertyInDeptUpdate) Mutation() *UserPropertyInDeptMutation {
	return upidu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upidu *UserPropertyInDeptUpdate) ClearUser() *UserPropertyInDeptUpdate {
	upidu.mutation.ClearUser()
	return upidu
}

// ClearDept clears the "dept" edge to the Dept entity.
func (upidu *UserPropertyInDeptUpdate) ClearDept() *UserPropertyInDeptUpdate {
	upidu.mutation.ClearDept()
	return upidu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upidu *UserPropertyInDeptUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(upidu.hooks) == 0 {
		affected, err = upidu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPropertyInDeptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upidu.mutation = mutation
			affected, err = upidu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(upidu.hooks) - 1; i >= 0; i-- {
			mut = upidu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upidu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (upidu *UserPropertyInDeptUpdate) SaveX(ctx context.Context) int {
	affected, err := upidu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upidu *UserPropertyInDeptUpdate) Exec(ctx context.Context) error {
	_, err := upidu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upidu *UserPropertyInDeptUpdate) ExecX(ctx context.Context) {
	if err := upidu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upidu *UserPropertyInDeptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpropertyindept.Table,
			Columns: userpropertyindept.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpropertyindept.FieldID,
			},
		},
	}
	if ps := upidu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upidu.mutation.IsLeader(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userpropertyindept.FieldIsLeader,
		})
	}
	if upidu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.UserTable,
			Columns: []string{userpropertyindept.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upidu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.UserTable,
			Columns: []string{userpropertyindept.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upidu.mutation.DeptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.DeptTable,
			Columns: []string{userpropertyindept.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: dept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upidu.mutation.DeptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.DeptTable,
			Columns: []string{userpropertyindept.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: dept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upidu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpropertyindept.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserPropertyInDeptUpdateOne is the builder for updating a single UserPropertyInDept entity.
type UserPropertyInDeptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPropertyInDeptMutation
}

// SetUserID sets the "user_id" field.
func (upiduo *UserPropertyInDeptUpdateOne) SetUserID(s string) *UserPropertyInDeptUpdateOne {
	upiduo.mutation.SetUserID(s)
	return upiduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upiduo *UserPropertyInDeptUpdateOne) SetNillableUserID(s *string) *UserPropertyInDeptUpdateOne {
	if s != nil {
		upiduo.SetUserID(*s)
	}
	return upiduo
}

// ClearUserID clears the value of the "user_id" field.
func (upiduo *UserPropertyInDeptUpdateOne) ClearUserID() *UserPropertyInDeptUpdateOne {
	upiduo.mutation.ClearUserID()
	return upiduo
}

// SetDeptID sets the "dept_id" field.
func (upiduo *UserPropertyInDeptUpdateOne) SetDeptID(u uint) *UserPropertyInDeptUpdateOne {
	upiduo.mutation.ResetDeptID()
	upiduo.mutation.SetDeptID(u)
	return upiduo
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (upiduo *UserPropertyInDeptUpdateOne) SetNillableDeptID(u *uint) *UserPropertyInDeptUpdateOne {
	if u != nil {
		upiduo.SetDeptID(*u)
	}
	return upiduo
}

// ClearDeptID clears the value of the "dept_id" field.
func (upiduo *UserPropertyInDeptUpdateOne) ClearDeptID() *UserPropertyInDeptUpdateOne {
	upiduo.mutation.ClearDeptID()
	return upiduo
}

// SetIsLeader sets the "isLeader" field.
func (upiduo *UserPropertyInDeptUpdateOne) SetIsLeader(b bool) *UserPropertyInDeptUpdateOne {
	upiduo.mutation.SetIsLeader(b)
	return upiduo
}

// SetUser sets the "user" edge to the User entity.
func (upiduo *UserPropertyInDeptUpdateOne) SetUser(u *User) *UserPropertyInDeptUpdateOne {
	return upiduo.SetUserID(u.ID)
}

// SetDept sets the "dept" edge to the Dept entity.
func (upiduo *UserPropertyInDeptUpdateOne) SetDept(d *Dept) *UserPropertyInDeptUpdateOne {
	return upiduo.SetDeptID(d.ID)
}

// Mutation returns the UserPropertyInDeptMutation object of the builder.
func (upiduo *UserPropertyInDeptUpdateOne) Mutation() *UserPropertyInDeptMutation {
	return upiduo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upiduo *UserPropertyInDeptUpdateOne) ClearUser() *UserPropertyInDeptUpdateOne {
	upiduo.mutation.ClearUser()
	return upiduo
}

// ClearDept clears the "dept" edge to the Dept entity.
func (upiduo *UserPropertyInDeptUpdateOne) ClearDept() *UserPropertyInDeptUpdateOne {
	upiduo.mutation.ClearDept()
	return upiduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upiduo *UserPropertyInDeptUpdateOne) Select(field string, fields ...string) *UserPropertyInDeptUpdateOne {
	upiduo.fields = append([]string{field}, fields...)
	return upiduo
}

// Save executes the query and returns the updated UserPropertyInDept entity.
func (upiduo *UserPropertyInDeptUpdateOne) Save(ctx context.Context) (*UserPropertyInDept, error) {
	var (
		err  error
		node *UserPropertyInDept
	)
	if len(upiduo.hooks) == 0 {
		node, err = upiduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPropertyInDeptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upiduo.mutation = mutation
			node, err = upiduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upiduo.hooks) - 1; i >= 0; i-- {
			mut = upiduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upiduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upiduo *UserPropertyInDeptUpdateOne) SaveX(ctx context.Context) *UserPropertyInDept {
	node, err := upiduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upiduo *UserPropertyInDeptUpdateOne) Exec(ctx context.Context) error {
	_, err := upiduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upiduo *UserPropertyInDeptUpdateOne) ExecX(ctx context.Context) {
	if err := upiduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upiduo *UserPropertyInDeptUpdateOne) sqlSave(ctx context.Context) (_node *UserPropertyInDept, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpropertyindept.Table,
			Columns: userpropertyindept.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpropertyindept.FieldID,
			},
		},
	}
	id, ok := upiduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserPropertyInDept.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := upiduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpropertyindept.FieldID)
		for _, f := range fields {
			if !userpropertyindept.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpropertyindept.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upiduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upiduo.mutation.IsLeader(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userpropertyindept.FieldIsLeader,
		})
	}
	if upiduo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.UserTable,
			Columns: []string{userpropertyindept.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upiduo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.UserTable,
			Columns: []string{userpropertyindept.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upiduo.mutation.DeptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.DeptTable,
			Columns: []string{userpropertyindept.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: dept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upiduo.mutation.DeptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.DeptTable,
			Columns: []string{userpropertyindept.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: dept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPropertyInDept{config: upiduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upiduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpropertyindept.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
