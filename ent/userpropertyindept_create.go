// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Peanuttown/dd_contacts/ent/dept"
	"github.com/Peanuttown/dd_contacts/ent/user"
	"github.com/Peanuttown/dd_contacts/ent/userpropertyindept"
)

// UserPropertyInDeptCreate is the builder for creating a UserPropertyInDept entity.
type UserPropertyInDeptCreate struct {
	config
	mutation *UserPropertyInDeptMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (upidc *UserPropertyInDeptCreate) SetUserID(s string) *UserPropertyInDeptCreate {
	upidc.mutation.SetUserID(s)
	return upidc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upidc *UserPropertyInDeptCreate) SetNillableUserID(s *string) *UserPropertyInDeptCreate {
	if s != nil {
		upidc.SetUserID(*s)
	}
	return upidc
}

// SetDeptID sets the "dept_id" field.
func (upidc *UserPropertyInDeptCreate) SetDeptID(u uint) *UserPropertyInDeptCreate {
	upidc.mutation.SetDeptID(u)
	return upidc
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (upidc *UserPropertyInDeptCreate) SetNillableDeptID(u *uint) *UserPropertyInDeptCreate {
	if u != nil {
		upidc.SetDeptID(*u)
	}
	return upidc
}

// SetIsLeader sets the "isLeader" field.
func (upidc *UserPropertyInDeptCreate) SetIsLeader(b bool) *UserPropertyInDeptCreate {
	upidc.mutation.SetIsLeader(b)
	return upidc
}

// SetUser sets the "user" edge to the User entity.
func (upidc *UserPropertyInDeptCreate) SetUser(u *User) *UserPropertyInDeptCreate {
	return upidc.SetUserID(u.ID)
}

// SetDept sets the "dept" edge to the Dept entity.
func (upidc *UserPropertyInDeptCreate) SetDept(d *Dept) *UserPropertyInDeptCreate {
	return upidc.SetDeptID(d.ID)
}

// Mutation returns the UserPropertyInDeptMutation object of the builder.
func (upidc *UserPropertyInDeptCreate) Mutation() *UserPropertyInDeptMutation {
	return upidc.mutation
}

// Save creates the UserPropertyInDept in the database.
func (upidc *UserPropertyInDeptCreate) Save(ctx context.Context) (*UserPropertyInDept, error) {
	var (
		err  error
		node *UserPropertyInDept
	)
	if len(upidc.hooks) == 0 {
		if err = upidc.check(); err != nil {
			return nil, err
		}
		node, err = upidc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPropertyInDeptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upidc.check(); err != nil {
				return nil, err
			}
			upidc.mutation = mutation
			node, err = upidc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upidc.hooks) - 1; i >= 0; i-- {
			mut = upidc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upidc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (upidc *UserPropertyInDeptCreate) SaveX(ctx context.Context) *UserPropertyInDept {
	v, err := upidc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (upidc *UserPropertyInDeptCreate) check() error {
	if _, ok := upidc.mutation.IsLeader(); !ok {
		return &ValidationError{Name: "isLeader", err: errors.New("ent: missing required field \"isLeader\"")}
	}
	return nil
}

func (upidc *UserPropertyInDeptCreate) sqlSave(ctx context.Context) (*UserPropertyInDept, error) {
	_node, _spec := upidc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upidc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (upidc *UserPropertyInDeptCreate) createSpec() (*UserPropertyInDept, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPropertyInDept{config: upidc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userpropertyindept.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpropertyindept.FieldID,
			},
		}
	)
	if value, ok := upidc.mutation.IsLeader(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userpropertyindept.FieldIsLeader,
		})
		_node.IsLeader = value
	}
	if nodes := upidc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.UserTable,
			Columns: []string{userpropertyindept.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upidc.mutation.DeptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpropertyindept.DeptTable,
			Columns: []string{userpropertyindept.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: dept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeptID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserPropertyInDeptCreateBulk is the builder for creating many UserPropertyInDept entities in bulk.
type UserPropertyInDeptCreateBulk struct {
	config
	builders []*UserPropertyInDeptCreate
}

// Save creates the UserPropertyInDept entities in the database.
func (upidcb *UserPropertyInDeptCreateBulk) Save(ctx context.Context) ([]*UserPropertyInDept, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upidcb.builders))
	nodes := make([]*UserPropertyInDept, len(upidcb.builders))
	mutators := make([]Mutator, len(upidcb.builders))
	for i := range upidcb.builders {
		func(i int, root context.Context) {
			builder := upidcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPropertyInDeptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upidcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upidcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upidcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upidcb *UserPropertyInDeptCreateBulk) SaveX(ctx context.Context) []*UserPropertyInDept {
	v, err := upidcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
