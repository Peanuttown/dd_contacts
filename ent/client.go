// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Peanuttown/dd_contacts/ent/migrate"

	"github.com/Peanuttown/dd_contacts/ent/dept"
	"github.com/Peanuttown/dd_contacts/ent/user"
	"github.com/Peanuttown/dd_contacts/ent/userpropertyindept"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Dept is the client for interacting with the Dept builders.
	Dept *DeptClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPropertyInDept is the client for interacting with the UserPropertyInDept builders.
	UserPropertyInDept *UserPropertyInDeptClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Dept = NewDeptClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPropertyInDept = NewUserPropertyInDeptClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Dept:               NewDeptClient(cfg),
		User:               NewUserClient(cfg),
		UserPropertyInDept: NewUserPropertyInDeptClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:             cfg,
		Dept:               NewDeptClient(cfg),
		User:               NewUserClient(cfg),
		UserPropertyInDept: NewUserPropertyInDeptClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Dept.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Dept.Use(hooks...)
	c.User.Use(hooks...)
	c.UserPropertyInDept.Use(hooks...)
}

// DeptClient is a client for the Dept schema.
type DeptClient struct {
	config
}

// NewDeptClient returns a client for the Dept from the given config.
func NewDeptClient(c config) *DeptClient {
	return &DeptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dept.Hooks(f(g(h())))`.
func (c *DeptClient) Use(hooks ...Hook) {
	c.hooks.Dept = append(c.hooks.Dept, hooks...)
}

// Create returns a create builder for Dept.
func (c *DeptClient) Create() *DeptCreate {
	mutation := newDeptMutation(c.config, OpCreate)
	return &DeptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dept entities.
func (c *DeptClient) CreateBulk(builders ...*DeptCreate) *DeptCreateBulk {
	return &DeptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dept.
func (c *DeptClient) Update() *DeptUpdate {
	mutation := newDeptMutation(c.config, OpUpdate)
	return &DeptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeptClient) UpdateOne(d *Dept) *DeptUpdateOne {
	mutation := newDeptMutation(c.config, OpUpdateOne, withDept(d))
	return &DeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeptClient) UpdateOneID(id uint) *DeptUpdateOne {
	mutation := newDeptMutation(c.config, OpUpdateOne, withDeptID(id))
	return &DeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dept.
func (c *DeptClient) Delete() *DeptDelete {
	mutation := newDeptMutation(c.config, OpDelete)
	return &DeptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeptClient) DeleteOne(d *Dept) *DeptDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeptClient) DeleteOneID(id uint) *DeptDeleteOne {
	builder := c.Delete().Where(dept.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeptDeleteOne{builder}
}

// Query returns a query builder for Dept.
func (c *DeptClient) Query() *DeptQuery {
	return &DeptQuery{
		config: c.config,
	}
}

// Get returns a Dept entity by its id.
func (c *DeptClient) Get(ctx context.Context, id uint) (*Dept, error) {
	return c.Query().Where(dept.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeptClient) GetX(ctx context.Context, id uint) *Dept {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Dept.
func (c *DeptClient) QueryUsers(d *Dept) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dept.Table, dept.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dept.UsersTable, dept.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPropertiesInDept queries the user_properties_in_dept edge of a Dept.
func (c *DeptClient) QueryUserPropertiesInDept(d *Dept) *UserPropertyInDeptQuery {
	query := &UserPropertyInDeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dept.Table, dept.FieldID, id),
			sqlgraph.To(userpropertyindept.Table, userpropertyindept.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dept.UserPropertiesInDeptTable, dept.UserPropertiesInDeptColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeptClient) Hooks() []Hook {
	hooks := c.hooks.Dept
	return append(hooks[:len(hooks):len(hooks)], dept.Hooks[:]...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDepts queries the depts edge of a User.
func (c *UserClient) QueryDepts(u *User) *DeptQuery {
	query := &DeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(dept.Table, dept.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.DeptsTable, user.DeptsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPropertiesInDept queries the properties_in_dept edge of a User.
func (c *UserClient) QueryPropertiesInDept(u *User) *UserPropertyInDeptQuery {
	query := &UserPropertyInDeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpropertyindept.Table, userpropertyindept.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PropertiesInDeptTable, user.PropertiesInDeptColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// UserPropertyInDeptClient is a client for the UserPropertyInDept schema.
type UserPropertyInDeptClient struct {
	config
}

// NewUserPropertyInDeptClient returns a client for the UserPropertyInDept from the given config.
func NewUserPropertyInDeptClient(c config) *UserPropertyInDeptClient {
	return &UserPropertyInDeptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpropertyindept.Hooks(f(g(h())))`.
func (c *UserPropertyInDeptClient) Use(hooks ...Hook) {
	c.hooks.UserPropertyInDept = append(c.hooks.UserPropertyInDept, hooks...)
}

// Create returns a create builder for UserPropertyInDept.
func (c *UserPropertyInDeptClient) Create() *UserPropertyInDeptCreate {
	mutation := newUserPropertyInDeptMutation(c.config, OpCreate)
	return &UserPropertyInDeptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPropertyInDept entities.
func (c *UserPropertyInDeptClient) CreateBulk(builders ...*UserPropertyInDeptCreate) *UserPropertyInDeptCreateBulk {
	return &UserPropertyInDeptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPropertyInDept.
func (c *UserPropertyInDeptClient) Update() *UserPropertyInDeptUpdate {
	mutation := newUserPropertyInDeptMutation(c.config, OpUpdate)
	return &UserPropertyInDeptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPropertyInDeptClient) UpdateOne(upid *UserPropertyInDept) *UserPropertyInDeptUpdateOne {
	mutation := newUserPropertyInDeptMutation(c.config, OpUpdateOne, withUserPropertyInDept(upid))
	return &UserPropertyInDeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPropertyInDeptClient) UpdateOneID(id int) *UserPropertyInDeptUpdateOne {
	mutation := newUserPropertyInDeptMutation(c.config, OpUpdateOne, withUserPropertyInDeptID(id))
	return &UserPropertyInDeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPropertyInDept.
func (c *UserPropertyInDeptClient) Delete() *UserPropertyInDeptDelete {
	mutation := newUserPropertyInDeptMutation(c.config, OpDelete)
	return &UserPropertyInDeptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserPropertyInDeptClient) DeleteOne(upid *UserPropertyInDept) *UserPropertyInDeptDeleteOne {
	return c.DeleteOneID(upid.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserPropertyInDeptClient) DeleteOneID(id int) *UserPropertyInDeptDeleteOne {
	builder := c.Delete().Where(userpropertyindept.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPropertyInDeptDeleteOne{builder}
}

// Query returns a query builder for UserPropertyInDept.
func (c *UserPropertyInDeptClient) Query() *UserPropertyInDeptQuery {
	return &UserPropertyInDeptQuery{
		config: c.config,
	}
}

// Get returns a UserPropertyInDept entity by its id.
func (c *UserPropertyInDeptClient) Get(ctx context.Context, id int) (*UserPropertyInDept, error) {
	return c.Query().Where(userpropertyindept.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPropertyInDeptClient) GetX(ctx context.Context, id int) *UserPropertyInDept {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPropertyInDept.
func (c *UserPropertyInDeptClient) QueryUser(upid *UserPropertyInDept) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := upid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpropertyindept.Table, userpropertyindept.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpropertyindept.UserTable, userpropertyindept.UserColumn),
		)
		fromV = sqlgraph.Neighbors(upid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDept queries the dept edge of a UserPropertyInDept.
func (c *UserPropertyInDeptClient) QueryDept(upid *UserPropertyInDept) *DeptQuery {
	query := &DeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := upid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpropertyindept.Table, userpropertyindept.FieldID, id),
			sqlgraph.To(dept.Table, dept.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpropertyindept.DeptTable, userpropertyindept.DeptColumn),
		)
		fromV = sqlgraph.Neighbors(upid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPropertyInDeptClient) Hooks() []Hook {
	return c.hooks.UserPropertyInDept
}
