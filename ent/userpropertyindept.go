// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Peanuttown/dd_contacts/ent/dept"
	"github.com/Peanuttown/dd_contacts/ent/user"
	"github.com/Peanuttown/dd_contacts/ent/userpropertyindept"
)

// UserPropertyInDept is the model entity for the UserPropertyInDept schema.
type UserPropertyInDept struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// DeptID holds the value of the "dept_id" field.
	DeptID uint `json:"dept_id,omitempty"`
	// IsLeader holds the value of the "isLeader" field.
	IsLeader bool `json:"isLeader,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPropertyInDeptQuery when eager-loading is set.
	Edges UserPropertyInDeptEdges `json:"edges"`
}

// UserPropertyInDeptEdges holds the relations/edges for other nodes in the graph.
type UserPropertyInDeptEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Dept holds the value of the dept edge.
	Dept *Dept `json:"dept,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPropertyInDeptEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DeptOrErr returns the Dept value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPropertyInDeptEdges) DeptOrErr() (*Dept, error) {
	if e.loadedTypes[1] {
		if e.Dept == nil {
			// The edge dept was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dept.Label}
		}
		return e.Dept, nil
	}
	return nil, &NotLoadedError{edge: "dept"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPropertyInDept) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpropertyindept.FieldIsLeader:
			values[i] = new(sql.NullBool)
		case userpropertyindept.FieldID, userpropertyindept.FieldDeptID:
			values[i] = new(sql.NullInt64)
		case userpropertyindept.FieldUserID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPropertyInDept", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPropertyInDept fields.
func (upid *UserPropertyInDept) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpropertyindept.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			upid.ID = int(value.Int64)
		case userpropertyindept.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				upid.UserID = value.String
			}
		case userpropertyindept.FieldDeptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dept_id", values[i])
			} else if value.Valid {
				upid.DeptID = uint(value.Int64)
			}
		case userpropertyindept.FieldIsLeader:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isLeader", values[i])
			} else if value.Valid {
				upid.IsLeader = value.Bool
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserPropertyInDept entity.
func (upid *UserPropertyInDept) QueryUser() *UserQuery {
	return (&UserPropertyInDeptClient{config: upid.config}).QueryUser(upid)
}

// QueryDept queries the "dept" edge of the UserPropertyInDept entity.
func (upid *UserPropertyInDept) QueryDept() *DeptQuery {
	return (&UserPropertyInDeptClient{config: upid.config}).QueryDept(upid)
}

// Update returns a builder for updating this UserPropertyInDept.
// Note that you need to call UserPropertyInDept.Unwrap() before calling this method if this UserPropertyInDept
// was returned from a transaction, and the transaction was committed or rolled back.
func (upid *UserPropertyInDept) Update() *UserPropertyInDeptUpdateOne {
	return (&UserPropertyInDeptClient{config: upid.config}).UpdateOne(upid)
}

// Unwrap unwraps the UserPropertyInDept entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upid *UserPropertyInDept) Unwrap() *UserPropertyInDept {
	tx, ok := upid.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPropertyInDept is not a transactional entity")
	}
	upid.config.driver = tx.drv
	return upid
}

// String implements the fmt.Stringer.
func (upid *UserPropertyInDept) String() string {
	var builder strings.Builder
	builder.WriteString("UserPropertyInDept(")
	builder.WriteString(fmt.Sprintf("id=%v", upid.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(upid.UserID)
	builder.WriteString(", dept_id=")
	builder.WriteString(fmt.Sprintf("%v", upid.DeptID))
	builder.WriteString(", isLeader=")
	builder.WriteString(fmt.Sprintf("%v", upid.IsLeader))
	builder.WriteByte(')')
	return builder.String()
}

// UserPropertyInDepts is a parsable slice of UserPropertyInDept.
type UserPropertyInDepts []*UserPropertyInDept

func (upid UserPropertyInDepts) config(cfg config) {
	for _i := range upid {
		upid[_i].config = cfg
	}
}
