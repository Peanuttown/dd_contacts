// Code generated by entc, DO NOT EDIT.

package dept

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Peanuttown/dd_contacts/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Generation applies equality check predicate on the "generation" field. It's identical to GenerationEQ.
func Generation(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneration), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Dept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Dept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// GenerationEQ applies the EQ predicate on the "generation" field.
func GenerationEQ(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneration), v))
	})
}

// GenerationNEQ applies the NEQ predicate on the "generation" field.
func GenerationNEQ(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGeneration), v))
	})
}

// GenerationIn applies the In predicate on the "generation" field.
func GenerationIn(vs ...uint) predicate.Dept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGeneration), v...))
	})
}

// GenerationNotIn applies the NotIn predicate on the "generation" field.
func GenerationNotIn(vs ...uint) predicate.Dept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGeneration), v...))
	})
}

// GenerationGT applies the GT predicate on the "generation" field.
func GenerationGT(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGeneration), v))
	})
}

// GenerationGTE applies the GTE predicate on the "generation" field.
func GenerationGTE(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGeneration), v))
	})
}

// GenerationLT applies the LT predicate on the "generation" field.
func GenerationLT(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGeneration), v))
	})
}

// GenerationLTE applies the LTE predicate on the "generation" field.
func GenerationLTE(v uint) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGeneration), v))
	})
}

// GenerationIsNil applies the IsNil predicate on the "generation" field.
func GenerationIsNil() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGeneration)))
	})
}

// GenerationNotNil applies the NotNil predicate on the "generation" field.
func GenerationNotNil() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGeneration)))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPropertiesInDept applies the HasEdge predicate on the "user_properties_in_dept" edge.
func HasUserPropertiesInDept() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPropertiesInDeptTable, UserPropertyInDeptFieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPropertiesInDeptTable, UserPropertiesInDeptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPropertiesInDeptWith applies the HasEdge predicate on the "user_properties_in_dept" edge with a given conditions (other predicates).
func HasUserPropertiesInDeptWith(preds ...predicate.UserPropertyInDept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPropertiesInDeptInverseTable, UserPropertyInDeptFieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPropertiesInDeptTable, UserPropertiesInDeptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubDepts applies the HasEdge predicate on the "sub_depts" edge.
func HasSubDepts() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubDeptsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubDeptsTable, SubDeptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubDeptsWith applies the HasEdge predicate on the "sub_depts" edge with a given conditions (other predicates).
func HasSubDeptsWith(preds ...predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubDeptsTable, SubDeptsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		p(s.Not())
	})
}
