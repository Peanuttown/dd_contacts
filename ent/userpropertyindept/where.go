// Code generated by entc, DO NOT EDIT.

package userpropertyindept

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Peanuttown/dd_contacts/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// DeptID applies equality check predicate on the "dept_id" field. It's identical to DeptIDEQ.
func DeptID(v uint) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptID), v))
	})
}

// IsLeader applies equality check predicate on the "isLeader" field. It's identical to IsLeaderEQ.
func IsLeader(v bool) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLeader), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserPropertyInDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserPropertyInDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), v))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), v))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), v))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), v))
	})
}

// DeptIDEQ applies the EQ predicate on the "dept_id" field.
func DeptIDEQ(v uint) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptID), v))
	})
}

// DeptIDNEQ applies the NEQ predicate on the "dept_id" field.
func DeptIDNEQ(v uint) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeptID), v))
	})
}

// DeptIDIn applies the In predicate on the "dept_id" field.
func DeptIDIn(vs ...uint) predicate.UserPropertyInDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeptID), v...))
	})
}

// DeptIDNotIn applies the NotIn predicate on the "dept_id" field.
func DeptIDNotIn(vs ...uint) predicate.UserPropertyInDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeptID), v...))
	})
}

// DeptIDIsNil applies the IsNil predicate on the "dept_id" field.
func DeptIDIsNil() predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeptID)))
	})
}

// DeptIDNotNil applies the NotNil predicate on the "dept_id" field.
func DeptIDNotNil() predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeptID)))
	})
}

// IsLeaderEQ applies the EQ predicate on the "isLeader" field.
func IsLeaderEQ(v bool) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLeader), v))
	})
}

// IsLeaderNEQ applies the NEQ predicate on the "isLeader" field.
func IsLeaderNEQ(v bool) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLeader), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDept applies the HasEdge predicate on the "dept" edge.
func HasDept() predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeptTable, DeptFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeptTable, DeptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeptWith applies the HasEdge predicate on the "dept" edge with a given conditions (other predicates).
func HasDeptWith(preds ...predicate.Dept) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeptInverseTable, DeptFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeptTable, DeptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPropertyInDept) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPropertyInDept) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPropertyInDept) predicate.UserPropertyInDept {
	return predicate.UserPropertyInDept(func(s *sql.Selector) {
		p(s.Not())
	})
}
